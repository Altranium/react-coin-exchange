{"version":3,"sources":["components/AccountBalance/AccountBalance.jsx","components/Coin/Coin.jsx","components/CoinList/CoinList.jsx","components/Header/coin.svg","components/Header/ExchangeHeader.jsx","App.js","reportWebVitals.js","index.js"],"names":["Balance","styled","div","Section","section","Button","button","BalanceToggleButton","formatter","Intl","NumberFormat","style","currency","AccountBalance","props","buttonText","showBalance","content","buttonClass","format","amount","onClick","handleBalanceVisibilityChange","className","handleAirDrop","Td","td","TdControls","TdName","Coin","name","ticker","price","balance","action","method","event","preventDefault","handleRefresh","tickerId","handleTransaction","Table","table","CoinList","coinData","map","key","Img","img","Header","header","Title","h1","ExchangeHeader","src","coin","alt","Component","formatPrice","parseFloat","Number","toFixed","App","useState","setBalance","setShowBalance","setCoinData","componentDidMount","a","axios","get","response","coinIds","data","slice","id","promises","Promise","all","coinPriceData","symbol","quotes","USD","useEffect","length","valueChangeTickerId","tickerUrl","newPrice","newCoinData","values","newValues","oldValue","isBuy","valueChangeId","balanceChange","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.debacedd.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport styled from 'styled-components'\n\nconst Balance = styled.div`\n    min-width: 250px;\n    margin: 0.5rem 0 0 2.5rem;\n    font-size: 1.5em;\n    text-align: left;\n`;\n\nconst Section = styled.section`\n    font-size: 2rem;\n    text-align: center;\n    margin-bottom: 2rem;\n    line-height: 3rem;\n`;\n\nconst Button = styled.button`\n    margin: 0 8px;\n`;\n\nconst BalanceToggleButton = styled(Button)`\n    width: 150px;\n`;\n\nvar formatter = Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'USD'\n});\nexport default function AccountBalance (props) {\n\n    const buttonText = props.showBalance ? 'Hide Balance' : 'Show Balance'\n    let content = '\\u00A0'\n    const buttonClass ='btn ' + (props.showBalance ? 'btn-info' : 'btn-warning')\n    if(props.showBalance) {\n        content = <>Balance: { formatter.format(props.amount) }</>\n    }\n    return (\n        <>\n            <Balance>{content}</Balance>\n            <Section>\n                <BalanceToggleButton onClick={props.handleBalanceVisibilityChange}\n                        className={buttonClass}>{buttonText}</BalanceToggleButton>\n                <Button className=\"btn btn-success\" onClick={props.handleAirDrop}><i className=\"fas fa-parachute-box\"></i></Button>   \n            </Section>\n        </>\n    )\n}\n\nAccountBalance.propTypes = {\n    amount: PropTypes.number.isRequired\n}","import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport styled from 'styled-components'\n\nconst Td = styled.td`\n    border: 1px solid #cccccc;\n    width: 14vw;\n`;\n\nconst TdControls = styled(Td)`\n    width: 34vw;\n`;\n\nconst TdName = styled(Td)`\n    width: 24vw;\n`;\n\nconst Button = styled.button`\n    font-size: 11px;\n    width: 100px;\n    margin: 3px 5px 0;\n`;\nexport default function Coin(props) {\n\n    // Runs when component is loaded onto the DOM\n    // componentDidMount() {\n    //     const callback = () => {\n    //         // set the state to a new random value\n    //         const randomPercentage = 0.995 + Math.random() * 0.01;\n\n    //         this.setState( function(oldState) {\n    //             return {\n    //                 price: oldState.price * randomPercentage\n    //             }\n    //         });\n    //     }\n    //     setInterval(callback, 1000);\n    // }\n\n    const handleRefresh = (event) => {\n        // Prevent the default action of submitting  the form\n        event.preventDefault();\n\n        props.handleRefresh(props.tickerId) \n    }\n\n    const handleBuy = (event) => {\n        // Prevent the default action of submitting  the form\n        event.preventDefault();\n\n        props.handleTransaction(true, props.tickerId)   \n    }\n\n    const handleSell = (event) => {\n        // Prevent the default action of submitting  the form\n        event.preventDefault();\n\n        props.handleTransaction(false, props.tickerId)   \n    }\n\n    return (\n        <tr>\n            <TdName>{props.name}</TdName>\n            <Td>{props.ticker}</Td>\n            <Td>${props.price}</Td>\n            <Td>{props.showBalance ? `${props.balance}` : '-'}</Td>\n            <TdControls>\n                <form action=\"#\" method=\"POST\">\n                    <Button className=\"btn btn-info\" onClick={handleRefresh}>Refresh</Button>\n                    <Button className=\"btn btn-success\" onClick={handleBuy}>Buy</Button>\n                    <Button className=\"btn btn-danger\" onClick={handleSell}>Sell</Button>\n                </form>\n            </TdControls>\n        </tr> \n    )\n}\n\nCoin.propTypes = {\n    name: PropTypes.string.isRequired,\n    ticker: PropTypes.string.isRequired,\n    price: PropTypes.number.isRequired\n}","import React from 'react'\nimport Coin from '../Coin/Coin'\n\nimport styled from 'styled-components'\n\nconst Table = styled.table`\n    font-size: 1rem;\n`;\n\nexport default function CoinList(props) {\n    return (\n        <Table className=\"table table-primary table-bordered\">\n            <thead>\n                <tr>\n                <th>Name</th>\n                <th>Ticker</th>\n                <th>Price</th>\n                <th>Amount</th>\n                <th>Actions</th>\n                </tr>\n            </thead>\n            <tbody>\n                {\n                    props.coinData.map( ({key, name, ticker, balance, price}) => \n                        <Coin \n                            key={key}\n                            handleRefresh={props.handleRefresh}\n                            handleTransaction={props.handleTransaction}\n                            name={name}\n                            ticker={ticker}\n                            balance={balance}\n                            price={price}\n                            showBalance={props.showBalance}\n                            tickerId={key} />\n                    )\n                }\n            \n            </tbody>\n        </Table>\n    )\n}\n","export default __webpack_public_path__ + \"static/media/coin.61845a62.svg\";","import React, { Component } from 'react'\nimport coin from './coin.svg';\nimport styled from 'styled-components'\n\nconst Img = styled.img`\n    height: 8rem;\n    pointer-events: none;\n    margin: 0 0 0 20px;\n`;\n\nconst Header = styled.header`\n    background-color: #282c34;\n    min-height: 10vh;\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    justify-content: flex-start;\n    color: white;\n`;\n\nconst Title = styled.h1`\n    font-size: 4rem;\n    line-height: 8rem;\n    fold-weight: bold;\n    min-width:300px;\n`;\n\nexport default class ExchangeHeader extends Component {\n    render() {\n        return (\n            <Header className=\"App-header\">\n                <Img src={coin} className=\"App-logo\" alt=\"logo\" />\n                <Title>Coinsim</Title>\n            </Header>\n            \n        )\n    }\n}\n","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport AccountBalance from './components/AccountBalance/AccountBalance';\nimport CoinList from './components/CoinList/CoinList';\nimport ExchangeHeader from './components/Header/ExchangeHeader';\nimport axios from 'axios';\n\n// import 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootswatch/dist/darkly/bootstrap.min.css';\nimport '@fortawesome/fontawesome-free/js/all';\n\nconst COIN_COUNT = 10;\n\nconst formatPrice = price => parseFloat(Number(price).toFixed(2));\nfunction App (props) {\n\n  const [balance, setBalance] = useState(10000);\n  const [showBalance, setShowBalance] = useState(false);\n  const [coinData, setCoinData] = useState([]);\n\n  const componentDidMount = async () => {\n    const response = await axios.get('https://api.coinpaprika.com/v1/coins');\n    const coinIds = response.data.slice(0, COIN_COUNT).map( coin => coin.id);\n    const tickerUrl = 'https://api.coinpaprika.com/v1/tickers/';\n    const promises = coinIds.map(id => axios.get(tickerUrl + id));\n    const coinData = await Promise.all(promises);\n    const coinPriceData = coinData.map(function(response) {\n      const coin = response.data;\n      return {\n        key:  coin.id,\n        name: coin.name,\n        ticker: coin.symbol,\n        balance:  0,\n        price:  formatPrice(coin.quotes.USD.price),\n      };\n    });\n    // Retrieves the price\n    setCoinData(coinPriceData);\n  }\n\n  useEffect( function() {\n    if(coinData.length === 0) {\n      // component did mount\n      componentDidMount();\n    } else {\n      // component did update\n    }\n  })\n\n  const handleAirDrop = () => {\n    setBalance(balance + 1000)\n  }\n\n  const handleTransaction = (isBuy, valueChangeId) => {\n    var balanceChange = isBuy ? 1 : -1;\n    const newCoinData = coinData.map(function(values) {\n      let newValues = {...values};\n      if(valueChangeId === values.key) {\n        newValues.balance += balanceChange;\n        setBalance(balance - balanceChange * newValues.price);\n      }\n      return newValues;\n    })\n    setCoinData(newCoinData);\n  }\n\n  const handleRefresh = async (valueChangeTickerId) => {\n    const tickerUrl = 'https://api.coinpaprika.com/v1/tickers/' + valueChangeTickerId;\n    const response = await axios.get(tickerUrl);\n    const newPrice = formatPrice(response.data.quotes.USD.price);\n    const newCoinData = coinData.map( function(values) {\n      let newValues = {...values}\n      if (valueChangeTickerId === values.key ) {\n        newValues.price = newPrice\n      }\n      return newValues\n    });\n    setCoinData(newCoinData)\n  }\n\n  const handleBalanceVisibilityChange = () => {\n    setShowBalance(oldValue => !oldValue);\n  }\n\n    return (\n      <div className=\"App\">\n        <ExchangeHeader />\n        <AccountBalance \n          amount={balance}\n          showBalance={showBalance}\n          handleAirDrop={handleAirDrop}\n          handleBalanceVisibilityChange={handleBalanceVisibilityChange} />\n        <CoinList \n          coinData={coinData}\n          handleRefresh={handleRefresh}\n          handleTransaction={handleTransaction}\n          showBalance={showBalance}\n          />\n      </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}