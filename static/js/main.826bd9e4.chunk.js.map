{"version":3,"sources":["components/AccountBalance/AccountBalance.jsx","components/Coin/Coin.jsx","components/CoinList/CoinList.jsx","components/Header/logo.svg","components/Header/Header.jsx","App.js","reportWebVitals.js","index.js"],"names":["Section","styled","section","AccountBalance","props","buttonText","showBalance","content","amount","onClick","handleBalanceVisibilityChange","CoinRow","td","Coin","name","ticker","price","balance","action","method","event","preventDefault","handleRefresh","tickerId","CoinList","className","coinData","map","key","Header","src","logo","alt","Component","formatPrice","parseFloat","Number","toFixed","App","useState","setShowBalance","setCoinData","componentDidMount","a","axios","get","response","coinIds","data","slice","coin","id","promises","Promise","all","coinPriceData","symbol","quotes","USD","useEffect","length","valueChangeTickerId","tickerUrl","newPrice","newCoinData","values","newValues","oldValue","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.826bd9e4.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport styled from 'styled-components'\n\nconst Section = styled.section`\n    font-size: 2rem;\n    text-align: left;\n    padding: 1.5rem 0 1.5rem 5rem\n`;\n\nexport default function AccountBalance (props) {\n\n    const buttonText = props.showBalance ? 'Hide Balance' : 'Show Balance'\n    let content = null\n    if(props.showBalance) {\n        content = <>Balance: ${props.amount}</>\n    }\n    return (\n        <Section>\n            {content}\n            <button onClick={props.handleBalanceVisibilityChange}>{buttonText}</button>   \n        </Section>\n    )\n}\n\nAccountBalance.propTypes = {\n    amount: PropTypes.number.isRequired\n}","import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport styled from 'styled-components'\n\nconst CoinRow = styled.td`\n    border: 1px solid #cccccc;\n    width: 25vh;\n`;\n\nexport default function Coin(props) {\n\n    // Runs when component is loaded onto the DOM\n    // componentDidMount() {\n    //     const callback = () => {\n    //         // set the state to a new random value\n    //         const randomPercentage = 0.995 + Math.random() * 0.01;\n\n    //         this.setState( function(oldState) {\n    //             return {\n    //                 price: oldState.price * randomPercentage\n    //             }\n    //         });\n    //     }\n    //     setInterval(callback, 1000);\n    // }\n\n    const handleClick = (event) => {\n        // Prevent the default action of submitting  the form\n        event.preventDefault();\n\n        props.handleRefresh(props.tickerId)\n        \n    }\n\n    return (\n        <tr>\n            <CoinRow>{props.name}</CoinRow>\n            <CoinRow>{props.ticker}</CoinRow>\n            <CoinRow>${props.price}</CoinRow>\n            {props.showBalance ? <CoinRow>${props.balance}</CoinRow> : null}\n            <CoinRow>\n                <form action=\"#\" method=\"POST\">\n                <button onClick={handleClick}>Refresh</button>\n                </form>\n                \n            </CoinRow>\n        </tr> \n    )\n}\n\nCoin.propTypes = {\n    name: PropTypes.string.isRequired,\n    ticker: PropTypes.string.isRequired,\n    price: PropTypes.number.isRequired\n}","import React from 'react'\nimport Coin from '../Coin/Coin'\n\nexport default function CoinList(props) {\n    return (\n        <table className=\"coin-table\">\n            <thead>\n                <tr>\n                <th>Name</th>\n                <th>Ticker</th>\n                <th>Price</th>\n                {props.showBalance ? <th>Balance</th> : null}\n                <th>Actions</th>\n                </tr>\n            </thead>\n            <tbody>\n                {\n                    props.coinData.map( ({key, name, ticker, balance, price}) => \n                        <Coin \n                            key={key}\n                            handleRefresh={props.handleRefresh}\n                            name={name}\n                            ticker={ticker}\n                            balance={balance}\n                            price={price}\n                            showBalance={props.showBalance}\n                            tickerId={key} />\n                    )\n                }\n            \n            </tbody>\n        </table>\n    )\n}\n","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { Component } from 'react'\nimport logo from './logo.svg';\n\nexport default class Header extends Component {\n    render() {\n        return (\n            <header className=\"App-header\">\n                <img src={logo} className=\"App-logo\" alt=\"logo\" />\n                <p className=\"App-title\">\n                    Coin Exchange\n                </p>\n            </header>\n        )\n    }\n}\n","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport AccountBalance from './components/AccountBalance/AccountBalance';\nimport CoinList from './components/CoinList/CoinList';\nimport Header from './components/Header/Header';\nimport axios from 'axios';\n\nconst COIN_COUNT = 10;\n\nconst formatPrice = price => parseFloat(Number(price).toFixed(2));\nfunction App (props) {\n\n  const [balance, setBalance] = useState(10000);\n  const [showBalance, setShowBalance] = useState(true);\n  const [coinData, setCoinData] = useState([]);\n\n  const componentDidMount = async () => {\n    const response = await axios.get('https://api.coinpaprika.com/v1/coins');\n    const coinIds = response.data.slice(0, COIN_COUNT).map( coin => coin.id);\n    const tickerUrl = 'https://api.coinpaprika.com/v1/tickers/';\n    const promises = coinIds.map(id => axios.get(tickerUrl + id));\n    const coinData = await Promise.all(promises);\n    const coinPriceData = coinData.map(function(response) {\n      const coin = response.data;\n      return {\n        key:  coin.id,\n        name: coin.name,\n        ticker: coin.symbol,\n        balance:  0,\n        price:  formatPrice(coin.quotes.USD.price),\n      };\n    });\n    // Retrieves the price\n    setCoinData(coinPriceData);\n  }\n\n  useEffect( function() {\n    if(coinData.length === 0) {\n      // component did mount\n      componentDidMount();\n    } else {\n      // component did update\n    }\n  })\n\n  const handleRefresh = async (valueChangeTickerId) => {\n    const tickerUrl = 'https://api.coinpaprika.com/v1/tickers/' + valueChangeTickerId;\n    const response = await axios.get(tickerUrl);\n    const newPrice = formatPrice(response.data.quotes.USD.price);\n    const newCoinData = coinData.map( function(values) {\n      let newValues = {...values}\n      if (valueChangeTickerId === values.key ) {\n        newValues.price = newPrice\n      }\n      return newValues\n    });\n    setCoinData(newCoinData)\n  }\n\n  const handleBalanceVisibilityChange = () => {\n    setShowBalance(oldValue => !oldValue);\n  }\n\n    return (\n      <div className=\"App\">\n        <Header />\n        <AccountBalance \n          amount={balance}\n          showBalance={showBalance}\n          handleBalanceVisibilityChange={handleBalanceVisibilityChange} />\n        <CoinList \n          coinData={coinData}\n          handleRefresh={handleRefresh} \n          showBalance={showBalance}\n          />\n      </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}